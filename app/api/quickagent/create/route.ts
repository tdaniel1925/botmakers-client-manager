import { NextResponse } from "next/server";
import { createOrganization } from "@/db/queries/organizations-queries";
import { createProject } from "@/db/queries/projects-queries";
import { createVoiceCampaignAction } from "@/actions/voice-campaign-actions";
import { searchPhoneNumbers } from "@/lib/voice-providers/vapi-provider";

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { conversationData } = body;
    const industrySlug = conversationData.industrySlug || "insurance-agents";

    console.log("Creating QuickAgent from conversation:", conversationData);
    console.log("Industry:", industrySlug);

    // 1. Create Organization (Lead Capture)
    const businessName = conversationData.agency_name || conversationData.agencyName || conversationData.businessName;
    const userEmail = conversationData.email || conversationData.userEmail;
    
    const organization = await createOrganization({
      name: businessName,
      email: userEmail,
      plan: "free",
      status: "trial",
      industry: industrySlug === "insurance-agents" ? "Insurance" : "Other",
      description: `QuickAgent for ${businessName}`,
    });

    console.log("Created organization:", organization.id);

    // 2. Create Project
    const project = await createProject({
      name: `${businessName} - Lead Qualification`,
      organizationId: organization.id,
      description: `AI lead qualification agent for ${businessName}`,
      status: "active",
      priority: "high",
    });

    console.log("Created project:", project.id);

    // 3. Use the system prompt already generated by QuickAgent
    // The new wizard generates this before calling this API
    const systemPrompt = conversationData.systemPrompt || `You are an AI lead qualification agent for ${businessName}. Help prospects find the right insurance coverage.`;
    const firstMessage = conversationData.firstMessage || `Hi! Thanks for your interest. I'm here to help you explore insurance options. Do you have a few minutes to chat?`;

    // 4. Search for Phone Number in Preferred Area Code
    const areaCode = conversationData.area_code || conversationData.areaCode;
    let phoneNumber = null;
    
    if (areaCode) {
      try {
        const searchResults = await searchPhoneNumbers({
          areaCode: areaCode,
          limit: 1,
        });

        if (searchResults.length > 0) {
          phoneNumber = searchResults[0].phoneNumber;
        }
      } catch (error) {
        console.error("Error searching for phone number:", error);
        // Will provision any available number if search fails
      }
    }

    // 5. Determine campaign type
    const campaignType = conversationData.campaign_type || conversationData.campaignType || "both";
    const normalizedType = campaignType.toLowerCase().includes("inbound") ? "inbound" 
      : campaignType.toLowerCase().includes("outbound") ? "outbound"
      : "inbound"; // Default to inbound for safety

    // 6. Create Voice Campaign
    const campaignResult = await createVoiceCampaignAction({
      name: `${businessName} - Lead Qualification Agent`,
      projectId: project.id,
      type: normalizedType,
      systemPrompt,
      firstMessage,
      mustCollectFields: conversationData.qualifying_questions || conversationData.qualifyingQuestions || [],
      voiceProvider: "vapi",
      model: "gpt-4o-mini",
      // Phone number provisioning
      phoneNumberSource: "vapi-auto-buy",
      preferredPhoneNumber: phoneNumber,
    });

    if (!campaignResult.success) {
      throw new Error("Failed to create campaign");
    }

    console.log("Created campaign:", campaignResult.campaign.id);

    // 7. Send Welcome Email
    await sendWelcomeEmail({
      email: userEmail,
      businessName: businessName,
      phoneNumber: campaignResult.campaign.phoneNumber || "Provisioning...",
      dashboardUrl: `${process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"}/dashboard/projects/${project.id}/campaigns/${campaignResult.campaign.id}`,
    });

    // 8. Return success response
    return NextResponse.json({
      success: true,
      organizationId: organization.id,
      projectId: project.id,
      campaignId: campaignResult.campaign.id,
      phoneNumber: campaignResult.campaign.phoneNumber,
      campaignType: normalizedType,
      dashboardUrl: `${process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"}/dashboard/projects/${project.id}/campaigns/${campaignResult.campaign.id}`,
    }, {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
      },
    });
  } catch (error) {
    console.error("Error creating QuickAgent:", error);
    return NextResponse.json(
      { error: "Failed to create agent", details: error instanceof Error ? error.message : "Unknown error" },
      { 
        status: 500,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type',
        },
      }
    );
  }
}

// Handle OPTIONS for CORS preflight
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  });
}

// Helper Functions

function extractIndustry(services: string): string {
  const lowerServices = services.toLowerCase();
  
  if (lowerServices.includes("dental") || lowerServices.includes("teeth")) {
    return "Healthcare - Dental";
  } else if (lowerServices.includes("medical") || lowerServices.includes("doctor")) {
    return "Healthcare - Medical";
  } else if (lowerServices.includes("law") || lowerServices.includes("attorney")) {
    return "Legal";
  } else if (lowerServices.includes("salon") || lowerServices.includes("spa")) {
    return "Beauty & Wellness";
  } else if (lowerServices.includes("restaurant") || lowerServices.includes("food")) {
    return "Food & Beverage";
  } else {
    return "Other";
  }
}

function generatePromptFromBusiness(data: any): string {
  return `You are a friendly and professional AI receptionist for ${data.businessName}.

BUSINESS INFORMATION:
- Services: ${data.services}
- Business Hours: ${data.businessHours}
- Greeting Style: ${data.greetingStyle}

YOUR ROLE:
1. Greet callers warmly and professionally
2. Listen to their needs and questions
3. Collect the following information: ${data.requiredFields?.join(", ") || "name and phone number"}
4. Answer common questions about our services
5. For appointments or complex questions, let them know we'll call back to confirm

GUIDELINES:
- Be conversational and natural, not robotic
- Show empathy and understanding
- If a caller sounds urgent or distressed, prioritize their needs
- If you don't know something, be honest and offer to have someone call back
- Always end calls by confirming their contact information

TONE:
${data.greetingStyle || "Professional and friendly"}

Remember: You represent ${data.businessName}. Be helpful, efficient, and make every caller feel valued.`;
}

async function sendWelcomeEmail(data: {
  email: string;
  businessName: string;
  phoneNumber: string;
  dashboardUrl: string;
}) {
  // TODO: Implement email sending using Resend
  // This would use the existing email-service.ts
  console.log("TODO: Send welcome email to", data.email);
  
  const emailContent = `
    <h1>ðŸŽ‰ Your AI Agent is Ready!</h1>
    <p>Hi ${data.businessName},</p>
    <p>Great news! Your AI receptionist is now live and answering calls at:</p>
    <h2>${data.phoneNumber}</h2>
    <p>Try calling it right now to hear it in action!</p>
    <p>You can manage your agent, view call logs, and customize responses in your dashboard:</p>
    <p><a href="${data.dashboardUrl}">Open Dashboard</a></p>
    <p>Questions? Just reply to this email.</p>
    <p>Welcome to QuickAgent!</p>
    <p>- The QuickAgent Team</p>
  `;

  // await sendEmail({
  //   to: data.email,
  //   subject: "Your AI Agent is Ready! ðŸŽ‰",
  //   html: emailContent,
  // });
}

