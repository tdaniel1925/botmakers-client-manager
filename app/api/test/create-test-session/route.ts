/**
 * Test API Route - Create Test Onboarding Session
 * FOR DEVELOPMENT/TESTING ONLY
 */

import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { db } from '@/db/db';
import { clientOnboardingSessionsTable } from '@/db/schema/onboarding-schema';
import { getProjectById } from '@/db/queries/projects-queries';
import { getTemplateByType, getTemplateById as getLocalTemplateById } from '@/lib/onboarding-templates';
import { analyzeProjectForOnboarding } from '@/lib/ai-onboarding-analyzer';
import { isPlatformAdmin, ensurePlatformAdmin } from '@/lib/platform-admin';

export async function POST(request: NextRequest) {
  try {
    // Only allow in development
    if (process.env.NODE_ENV === 'production') {
      return NextResponse.json(
        { error: 'This endpoint is only available in development' },
        { status: 403 }
      );
    }

    const { projectId } = await request.json();

    if (!projectId) {
      return NextResponse.json(
        { error: 'Project ID required' },
        { status: 400 }
      );
    }

    // Ensure user is platform admin
    const { userId } = auth();
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized - no user' },
        { status: 401 }
      );
    }

    await ensurePlatformAdmin();

    // Get project details
    const project = await getProjectById(projectId);
    if (!project) {
      return NextResponse.json(
        { error: 'Project not found' },
        { status: 404 }
      );
    }

    // Determine template type (auto-detect with AI)
    let finalTemplateType: any = 'generic';
    let template;
    let steps;

    try {
      const analysis = await analyzeProjectForOnboarding(
        project.description || '',
        project.name
      );
      finalTemplateType = analysis.projectType;
    } catch (aiError) {
      console.log('AI analysis failed, using generic template:', aiError);
      finalTemplateType = 'generic';
    }

    // Get template
    template = getTemplateByType(finalTemplateType);
    if (!template) {
      template = getLocalTemplateById('generic');
    }

    steps = template?.steps || [];
    
    // Calculate expiration (30 days from now)
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 30);

    // Create session directly - let DB generate id and accessToken UUIDs
    const [session] = await db.insert(clientOnboardingSessionsTable).values({
      projectId,
      organizationId: project.organizationId,
      templateId: undefined,
      onboardingType: finalTemplateType,
      status: 'pending',
      steps: steps as any,
      responses: {},
      currentStep: 0,
      completionPercentage: 0,
      expiresAt,
      // accessToken will be auto-generated by database (UUID)
      // id will be auto-generated by database (UUID)
    }).returning();

    // Generate onboarding URL
    const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
    const onboardingUrl = `${appUrl}/onboarding/${session.accessToken}`;

    console.log('âœ… Test session created:', session.id);

    return NextResponse.json({
      success: true,
      sessionId: session.id,
      accessToken: session.accessToken,
      onboardingUrl,
      projectName: project.name,
      templateType: finalTemplateType,
    });
  } catch (error) {
    console.error('Error creating test session:', error);
    return NextResponse.json(
      {
        error: error instanceof Error ? error.message : 'Failed to create session',
        details: error instanceof Error ? error.stack : undefined,
      },
      { status: 500 }
    );
  }
}
